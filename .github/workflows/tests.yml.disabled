# =============================================================================
# QuranBot - Automated Testing Workflow
# =============================================================================
# GitHub Actions workflow for continuous integration and testing.
# Runs on every push and pull request to ensure code quality and reliability.
# =============================================================================

name: Tests and Quality Checks

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        test-category:
          - "unit"
          - "integration"
          - "security"
          - "performance"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio pytest-cov pytest-mock
          pip install black ruff mypy pre-commit

      - name: Create test environment
        run: |
          mkdir -p test_data/{audio,logs,backup,data}
          echo "DISCORD_TOKEN=test_token" > .env.test
          echo "GUILD_ID=123456789012345678" >> .env.test
          echo "TARGET_CHANNEL_ID=123456789012345679" >> .env.test
          echo "VOICE_CHANNEL_ID=123456789012345680" >> .env.test

      - name: Run Unit Tests
        if: matrix.test-category == 'unit'
        run: |
          python -m pytest tests/test_core_services.py tests/test_di_container.py tests/test_exceptions.py tests/test_config.py -v --cov=src --cov-report=xml

      - name: Run Integration Tests
        if: matrix.test-category == 'integration'
        run: |
          python -m pytest tests/test_integration_comprehensive.py tests/test_integration.py -v --cov=src --cov-report=xml

      - name: Run Security Tests
        if: matrix.test-category == 'security'
        run: |
          python -m pytest tests/test_security.py tests/test_security_comprehensive.py -v --cov=src --cov-report=xml

      - name: Run Performance Tests
        if: matrix.test-category == 'performance'
        run: |
          python -m pytest tests/test_performance.py -v --cov=src --cov-report=xml -m "not slow"

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-category }}
          name: codecov-${{ matrix.python-version }}-${{ matrix.test-category }}

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy pre-commit
          pip install -e .

      - name: Run Black formatting check
        run: |
          black --check --diff src/ tests/

      - name: Run Ruff linting
        run: |
          ruff check src/ tests/

      - name: Run MyPy type checking
        run: |
          mypy src/ --ignore-missing-imports --show-error-codes

      - name: Run pre-commit hooks
        run: |
          pre-commit install
          pre-commit run --all-files

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -e .

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ # Also run with normal output

      - name: Run Safety vulnerability check
        run: |
          safety check --json --output safety-report.json
          safety check # Also run with normal output

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme
          pip install -e .

      - name: Build documentation
        run: |
          # Check if docs directory exists and has Sphinx config
          if [ -f "docs/conf.py" ]; then
            cd docs
            make html
          else
            echo "No Sphinx documentation found, skipping"
          fi

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov

      - name: Run full test suite with coverage
        run: |
          python -m pytest tests/ --cov=src --cov-report=html --cov-report=xml --cov-report=term-missing

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html-report
          path: htmlcov/

      - name: Coverage comment on PR
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [test, code-quality, security-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Generate test report
        run: |
          python tests/test_runner.py --skip-lint > test-report.md

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report.md

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ§ª Test Report\n\n${report}`
            });

  deploy-test:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Test bot initialization
        run: |
          # Create minimal test environment
          mkdir -p test_env/{audio,data,logs,backup}
          export DISCORD_TOKEN="test_token"
          export GUILD_ID="123456789012345678"
          export TARGET_CHANNEL_ID="123456789012345679"
          export VOICE_CHANNEL_ID="123456789012345680"

          # Test that bot can import and initialize core services
          python -c "
          import sys
          sys.path.insert(0, 'src')

          from src.core.di_container import DIContainer
          from src.core.cache_service import CacheService, CacheStrategy

          # Test DI container
          container = DIContainer()
          print('âœ… DI Container initialized')

          # Test cache service
          cache = CacheService(CacheStrategy.LRU, 100, 300)
          print('âœ… Cache Service initialized')

          print('ðŸŽ‰ Bot core services initialization test passed')
          "

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Deployment Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Core services initialization: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… All tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Code quality: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ“… Tested on: $(date)" >> $GITHUB_STEP_SUMMARY
